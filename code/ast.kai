#import "tokens.kai"

Pos :: tokens.Pos

AstKind :: enum {
    badExpr,
    comment,
    structField,
    enumCase,
    locationDirective,
    nilLiteral,
    ident,
    ellipsis,
    basicLit,
    polyParameterList,
    resultList,
    identList,
    funcLit,
    compositeLit,
    paren,
    selector,
    subscript,
    slice,
    _autocast,
    _cast,
    call,
    unary,
    binary,
    ternary,
    keyValue,
    pointerType,
    arrayType,
    sliceType,
    vectorType,
    structType,
    polyStructType,
    enumType,
    unionType,
    variantType,
    polyType,
    variadicType,
    funcType,
    badStmt,
    empty,
    label,
    assign,
    returnStmt,
    deferStmt,
    usingStmt,
    branchStmt,
    block,
    ifStmt,
    caseClause,
    switchStmt,
    forStmt,
    forIn,
    importStmt,
    library,
    foreign,
    declBlock,
    declaration,
    badDecl,
    functionSpecialization,
    structSpecialization
}

Ast :: union {
    badExpr : struct {}
    comment : struct {}
    structField : struct {}
    enumCase : struct {}
    locationDirective : struct {}
    nilLiteral : struct {}
    ident : struct {}
    ellipsis : struct {}
    basicLit : struct {}
    polyParameterList : struct {}
    resultList : struct {}
    identList : struct {}
    funcLit : struct {}
    compositeLit : struct {}
    paren : struct {}
    selector : struct {}
    subscript : struct {}
    slice : struct {}
    _autocast : struct {}
    _cast : struct {}
    call : struct {}
    unary : struct {}
    binary : struct {}
    ternary : struct {}
    keyValue : struct {}
    pointerType : struct {}
    arrayType : struct {}
    sliceType : struct {}
    vectorType : struct {}
    structType : struct {}
    polyStructType : struct {}
    enumType : struct {}
    unionType : struct {}
    variantType : struct {}
    polyType : struct {}
    variadicType : struct {}
    funcType : struct {}
    badStmt : struct {}
    empty : struct {}
    label : struct {}
    assign : struct {}
    returnStmt : struct {}
    deferStmt : struct {}
    usingStmt : struct {}
    branchStmt : struct {}
    block : struct {}
    ifStmt : struct {}
    caseClause : struct {}
    switchStmt : struct {}
    forStmt : struct {}
    forIn : struct {}
    importStmt : struct {}
    library : struct {}
    foreign : struct {}
    declBlock : struct {}
    declaration : struct {}
    badDecl : struct {}
    functionSpecialization : struct {}
    structSpecialization : struct {}
}

AstNode :: struct {
    kind: AstKind
    start,
    end: Pos
    ast: Ast
}
