#import "libc.kai"

AllocType :: enum {
    Alloc,
    Free,
    FreeAll,
    Realloc
}

AllocFunc :: *(payload: rawptr, type: AllocType, size, oldsize: u64, old: rawptr) -> rawptr

Allocator :: struct {
    func: AllocFunc
    payload: rawptr
}

Arena :: struct {
    allocator: Allocator
    raw: []u8
}

// Initialize an 'Arena' using the default allocator.
ArenaInit :: fn(arena: *Arena, size: u64) -> void {
    ArenaInitFromAllocator(arena, DefaultAllocatorInit(), size)    
}

// Initialize an 'Arena' using a custom allocator.
ArenaInitFromAllocator :: fn(arena: *Arena, a: Allocator, size: u64) -> void {
    raw : []u8
    raw.raw = Alloc(a, size)
    raw.cap = size
    raw.len = 0
    arena.allocator = a
    arena.raw = raw
}

// An 'Arena'-based allocator.
ArenaAllocatorInit :: fn(arena: *Arena) -> Allocator {
    return Allocator {
        &arenaAllocFunc,
        arena
    }
}

// A 'malloc'-based allocator.
DefaultAllocatorInit :: fn() -> Allocator {
    return Allocator {
        &heapAllocFunc,
        nil
    }
}

arenaAllocFunc :: fn(payload: rawptr, type: AllocType, size, oldsize: u64, old: rawptr) -> rawptr {
    arena: *Arena = autocast payload

    switch type {
    case AllocType.Alloc: 
        if arena.raw.len + size > arena.raw.cap {
            return nil
        }
        ptr := &arena.raw[arena.raw.len]
        arena.raw.len += size
        return ptr
        
    case AllocType.Free: fallthrough 
    case AllocType.FreeAll: 
        arena.raw.len = 0
    case AllocType.Realloc:
        buff := Realloc(arena.allocator, arena.raw.raw, oldsize, size)
        arena.raw.raw = buff
        arena.raw.cap = size
        return buff
    }

    return nil
}

heapAllocFunc :: fn(payload: rawptr, type: AllocType, size, oldsize: u64, old: rawptr) -> rawptr {
    using AllocType
    switch type {
    case Alloc:
        return libc.malloc(size)
    case Free:
        libc.free(old)
        return(nil) // FIXME: @CompilerBug 'return nil' derails parser
    case FreeAll: 
        break
    case Realloc:
        return libc.realloc(old, size)
    }

    return nil
}

// Maps a file to an address through the kernel.
ReadFile :: fn(path: string) -> []u8, bool {
    using libc
    file := open(path.raw, O_RDONLY)
    if file == -1 { return []u8{}, false }
    defer close(file)
    
    stat: Stat
    if fstat(file, &stat) < 0
        return []u8{}, false

    len := stat.size
    addr := mmap(nil, len, PROT_READ, MAP_PRIVATE, file, 0)
    if cast(i64)addr < 0
        return []u8{}, false

    result: []u8
    result.raw = autocast addr
    result.len = len
    result.cap = 0
    return result, true
}

// Allocates 'size' bytes and returns a raw pointer.
Alloc :: fn(a: Allocator, size: u64) -> rawptr {
    return a.func(a.payload, AllocType.Alloc, size, 0, nil)
}

// Frees up previously allocated memory.
Free :: fn(a: Allocator, ptr: rawptr) -> void {
    if ptr == nil return
    a.func(a.payload, AllocType.Free, 0, 0, ptr)
}

// Free up all items allocated by an 'Allocator'.
FreeAll :: fn(a: Allocator) -> void {
    a.func(a.payload, AllocType.FreeAll, 0, 0, nil)
}

// Reallocate memory.
Realloc :: fn(a: Allocator, ptr: rawptr, oldsize, size: u64) -> rawptr {
    return a.func(a.payload, AllocType.Realloc, size, oldsize, ptr)
}

ArrayInit :: fn(a: Allocator, array: *[]$T, cap: u64) -> void {
    array.raw = cast(*T)Alloc(a, sizeof(T) * cap)
    array.len = 0
    array.cap = cap
}

MakeArray :: fn(raw: *$T, len, cap: u64) -> []T {
    array: []T
    array.raw = raw
    array.len = len
    array.cap = cap
    return array
}

Grow :: fn(a: Allocator, array: *[]$T, cap: u64) -> void {
    newCap := array.cap/2 * 3
    if newCap < cap
        newCap = cap
    UpdateCapacity(a, array, newCap)
}

UpdateCapacity :: fn(a: Allocator, array: *[]$T, cap: u64) -> void {
    if array.cap == cap return

    newBuff := Alloc(a, sizeof(T) * cap)
    libc.memcpy(newBuff, array.raw, sizeof(T)*array.cap)
    Free(a, array.raw)
    array.raw = cast(*T)newBuff
    array.cap = cap
}


Append :: fn(a: Allocator, array: *[]$T, val: T) -> void {
    if array.cap < array.len+1
        Grow(a, array, 0)

    array.raw[array.len] = val
    array.len += 1
}
