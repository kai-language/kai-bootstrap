#import "lexer.kai" 

Token :: lexer.Token

Operator :: enum {
    Invalid
    Add
    Sub
    Mul
    Quo
    Rem
    And
    Or
    Xor
    Shl
    Shr
}

Ast :: union {
    BadExpr : struct { begin, end: Token }

    Comment : Token

    StructField : struct {}

    EnumCase : struct {}

    LocationDirective : struct {
        token: Token
        ident: []u8
    }

    NilLiteral : Token

    Ident : Token

    Ellipsis : struct {
        token: Token
        expr: *Ast
    }

    BasicLit : Token

    PolyParameterList : struct {}

    ResultList : struct {}

    IdentList : struct {
        token: Token
        idents: []*Ast
    }

    FuncLit : struct {
        token: Token
        type, 
        body: *Ast
        flags: u8
    }

    CompositeLit : struct {
        begin,
        end: Token
        elements: []*Ast
    }

    Paren : struct {
        begin, end: Token
        expr: *Ast
    }

    Selector : struct {
        token: Token
        rec, sel: *Ast
    }

    Subscript : struct {
        begin, end: Token
        rec,
        index: *Ast
    }

    Slice : struct {
        begin, end: Token
        expr,
        lo,
        hi: *Ast
    }

    Autocast : struct {
        token: Token
        expr: *Ast
    }

    Cast : struct {
        kind: Token
        type,
        expr: *Ast
    }

    Call : struct {
        begin,
        end: Token
        labels: []*Ast
        args:   []*Ast
    }

    Unary : struct {
        op: Token
        kind: Operator
        element: *Ast
    }

    Binary : struct {
        op: Token
        kind: Operator
        lhs, rhs: *Ast
    }

    Ternary : struct {
        qmark, colon: Token
        cond,
        then,
        els: *Ast
    }

    KeyValue : struct {
        token: Token
        key,
        value: *Ast
    }

    PointerType : struct {
        token: Token
        type: *Ast
    }

    ArrayType : struct {
        begin, end: Token
        length,
        type: *Ast
    }

    SliceType : struct {
        begin, end: Token
        type: *Ast
    }

    VectorType : struct {
        begin, end: Token
        size,
        type: *Ast
    }

    StructType : struct {}

    PolyStructType : struct {}

    EnumType : struct {}

    UnionType : struct {}

    VariantType : struct {}

    PolyType : struct {
        token: Token
        type: *Ast
    }

    VariadicType : struct {
        token: Token
        type: *Ast
        isCVargs: bool
    }

    FuncType : struct {

    }

    BadStmt : struct {
        begin, end: Token
    }

    Empty : Token

    Label : Token

    ExprStmt : struct {
        token: Token
        expr: *Ast
    }

    Assign : struct {
        token: Token
        lhs,
        rhs: []*Ast
    }

    Return: struct {
        token: Token
        stmts: []*Ast
    }

    Defer: struct {
        token: Token
        stmt: *Ast
    }

    Using: struct {
        token: Token
        expr: *Ast
    }

    Branch: struct {
        token: Token
        label: *Ast
    }

    Block : struct {
        begin, end: Token
        stmts: []*Ast
    }

    If: struct {
        token: Token
        cond,
        body,
        els: *Ast
    }

    CaseClause : struct {
        token: Token
        match: []*Ast
        block: *Ast
        // TODO(Brett): entity/label support
    }

    Switch: struct {
        token: Token
        match: *Ast
        cases: []*Ast
        // TODO(Brett): entity/label support
    }

    For: struct {
        token: Token
        init,
        cond,
        step,
        body: *Ast
    }

    ForIn : struct {}

    Import: struct {}

    Library : struct {
        token: Token
        path,
        alias: *Ast
    }

    Foreign : struct {
        token: Token
        library,
        decl: *Ast
        linkname: []u8
        callconv: []u8
    }

    DeclBlock : struct {}

    Declaration : struct {
        token: Token
        names,
        values: []*Ast
        type: *Ast
        isConstant: bool
    }

    BadDecl : struct {
        begin, end: Token
    }

    FunctionSpecialization : struct {}

    StructSpecialization : struct {}
}

