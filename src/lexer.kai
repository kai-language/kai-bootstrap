#import "alloc.kai"
#import "errors.kai"
#import "strings.kai"

TokenKind :: enum {
    Invalid,
    Eof,
    Comment,

    Ident,
    Directive,

    Int,
    Float,
    String,

    Add,
    Sub,
    Mul,
    Quo,
    Rem,

    And,
    Or,
    Xor,
    Shl,
    Shr,

    AssignAdd,
    AssignSub,
    AssignMul,
    AssignQuo,
    AssignRem,
    
    AssignAnd,
    AssignOr,
    AssignXor,
    AssignShl,
    AssignShr,

    Land,
    Lor,
    
    Lss,
    Gtr,
    Not,

    Eql,
    Neq,
    Leq,
    Geq,

    Assign,
    Ellipsis,
    Dollar,
    Question,
    RetArrow,

    Lparen,
    Lbrack,
    Lbrace,
    Rparen,
    Rbrack,
    Rbrace,

    Comma,
    Period,
    Colon,
    Semicolon,

    Cast,
    Bitcast,
    Autocast,

    Using,

    Goto,
    Break,
    Continue,
    Fallthrough,
   
    Return,

    If,
    For,
    Else,
    Defer,
    In,
    Switch,
    Case,
    
    Fn,
    Union,
    Variant,
    Enum,
    Struct,

    Nil
}

Pos :: struct {
    fileno,
    offset: u32
}

Position :: struct {
    filename: string
    offset,
    line,
    column: u32
}

Token :: struct {
    kind: TokenKind
    pos : Position
    lit : []u8 
}

Invalid := Token { TokenKind.Invalid }

Lexer :: struct {
    path: string
    data: []u8
    lineCount: u64
    offset: u64
    lineOffset: u32
    currentCP: u32
    insertSemi: bool
    insertSemiBeforeLBrace: bool
}

LexerInit :: fn(l: *Lexer, path: string) -> bool {
    data, ok := alloc.ReadFile(path)
    if !ok
        return false

    l.path = path
    l.data = data
    l.offset = 0
    l.lineOffset = 0
    l.lineCount = 1
    l.insertSemi = false

    NextCodePoint(l)

    return true
}

NextCodePoint :: fn(l: *Lexer) -> void {
    if l.offset >= l.data.len {
        l.offset = l.data.len - 1
        curr := l.data[l.offset]
        if curr == cast(u8)"\n" {
            l.lineCount += 1
            l.lineOffset = cast(u32)l.offset
        }
        l.currentCP = strings.EOF
    } else {
        curr := l.data[l.offset:]
        cp, size := strings.DecodeCodePoint(curr)

        if cp == strings.InvalidCodePoint {
            error(l, "Invalid unicode code point")
        }

        if cp == cast(u32)"\n" {
            l.lineCount += (l.insertSemi) ? 1 : 0
            l.lineOffset = cast(u32)l.offset
        }

        l.currentCP = cp
        l.offset += size
    }
}

SkipWhitespace :: fn(l: *Lexer) -> void {
    for true {
        switch l.currentCP {
        case "\n":
            if l.insertSemi
                return
            NextCodePoint(l)
        case " ", "\t", "\r":
            NextCodePoint(l)
        case: return
        }
    }
}

DigitVal :: fn(cp: u32) -> u32 {
    switch cp {
    case "0", "1", "2", "3", "4", "5", "6", "7", "8", "9":
        return cp - cast(u32)"0"
    case "a", "b", "c", "d", "e", "f":
        return cp - cast(u32)"a" + 10
    case "A", "B", "C", "D", "E", "F":
        return cp - cast(u32)"A" + 10
    case: return 16
    }
}

ScanMatissa :: fn(l: *Lexer, base: u32) -> void {
    for l.currentCP != strings.EOF {
        if l.currentCP != cast(u32)"_" && DigitVal(l.currentCP) >= base 
            break

        NextCodePoint(l)
    }
}

ScanNumber :: fn(l: *Lexer, seenDecimalPoint: bool) -> Token {
    start := l.offset

    t: Token
    t.kind = TokenKind.Int
    t.lit = l.data[start-1:start]
    t.pos.filename = l.path
    t.pos.line = cast(u32)l.lineCount
    t.pos.column = cast(u32)l.offset - l.lineOffset + 1

    mustBeInteger := false

    if seenDecimalPoint {
        t.kind = TokenKind.Float
        ScanMatissa(l, 10)
    }

    if l.currentCP == cast(u32)"0" && !seenDecimalPoint {
        NextCodePoint(l)
        
        switch l.currentCP {
        case "x":
            NextCodePoint(l)
            ScanMatissa(l, 16)
            mustBeInteger = true
        case "b":
            NextCodePoint(l)
            ScanMatissa(l, 2)
            mustBeInteger = true
        case:
            ScanMatissa(l, 10)
        }
    }

    if !seenDecimalPoint && !mustBeInteger
        ScanMatissa(l, 10)

    if l.currentCP == cast(u32)"." && !seenDecimalPoint && !mustBeInteger {
        NextCodePoint(l)
        t.kind = TokenKind.Float
        ScanMatissa(l, 10)
    }

    // TODO(Brett): exponent

    t.lit.len = l.offset - start
    return t
}

ScanEscape :: fn(l: *Lexer) -> void {
    switch l.currentCP {
    case "a", "b", "f", "n", "r", "t", "v", "\\", "\"":
        NextCodePoint(l) 
    case:
        error(l, "Unknown escape")
    }
}

NextToken :: fn(l: *Lexer) -> Token {
    SkipWhitespace(l)

    t: Token
    t.kind = TokenKind.Invalid
    t.lit = l.data[l.offset-1:l.offset]
    t.pos.filename = l.path
    t.pos.line = cast(u32)l.lineCount
    t.pos.column = cast(u32)l.offset - l.lineOffset + 1

    l.insertSemi = false

    cp := l.currentCP
    if strings.IsAlpha(cp) {
        offset := l.offset
        t.kind = TokenKind.Ident
        for strings.IsAlpha(l.currentCP) || strings.IsNumeric(l.currentCP) {
            NextCodePoint(l)
        }

        t.lit.len = l.offset - offset
        t.kind = GetKeyword(t.lit)

        using TokenKind
        switch t.kind {
        case Ident, Break, Continue, Fallthrough, Return, Nil:
            l.insertSemi = true
        case If, For, Switch:
            l.insertSemiBeforeLBrace = true
        }
    } else if strings.IsNumeric(cp) {
        l.insertSemi = true
        t = ScanNumber(l, false)
    } else {
        NextCodePoint(l)

        using TokenKind
        switch cp {
        case strings.EOF:
            if l.insertSemi {
                l.insertSemi = false
                t.kind = TokenKind.Semicolon
                t.lit = "\n"
            } else {
                t.kind = Eof
                t.lit.len = 0
            }
        case "\n":
            // we only reach here is self.insertSemi was
            // set in the first place and exited early
            // from SkipWhitespace()
            l.insertSemi = false
            l.insertSemiBeforeLBrace = false
            t.kind = Semicolon
        case "\"":
            l.insertSemi = true
            offset := l.offset - 1

            for true {
                cp := l.currentCP

                if cp == strings.EOF {
                    error(l, "String literal not terminated")
                    break
                }

                NextCodePoint(l)

                if cp == cast(u32)"\""
                    break

                if cp == cast(u32)"\\"
                    ScanEscape(l)
            }

            t.lit.len = l.offset - offset
            t.kind = String
            ok, allocatedExtra := strings.Escape(alloc.DefaultAllocatorInit(), &t.lit)
            if allocatedExtra {
                // TODO(Brett): add this string to the list so we can free it when we
                // free the lexer
                error(l, "Escaped strings not-yet supported")
            }

        case "+": t.kind = switch2(l, Add, AssignAdd)
        case "-": t.kind = switch3(l, Sub, AssignSub, RetArrow, ">")
        case "*": t.kind = switch2(l, Mul, AssignMul)
        case "/":
            if l.currentCP == cast(u32)"/" || l.currentCP == cast(u32)"*" {
                if l.insertSemi && findLineEnd(l) {
                }
            } else {
                t.kind = switch2(l, Quo, AssignQuo)
            }
        case "%": t.kind = switch2(l, Rem, AssignRem)
        case "^": t.kind = switch2(l, Xor, AssignXor)
        case ">": t.kind = switch4(l, Gtr, Geq, Shr, AssignShr, ">")
        case "<": t.kind = switch4(l, Lss, Leq, Shl, AssignShl, "<")
        case "=": t.kind = switch2(l, Assign, Eql)
        case "!": t.kind = switch2(l, Not,    Neq)
        case "&": t.kind = switch3(l, And, AssignAnd, Land, "&")
        case "|": t.kind = switch3(l, Or,  AssignOr,  Lor,  "|")
        case ":": t.kind = Colon
        case "$": t.kind = Dollar
        case "?": t.kind = Question
        case ",": t.kind = Comma
        case ";": t.kind = Semicolon
        case "(": t.kind = Lparen
        case ")": t.kind = Rparen; l.insertSemi = true
        case "[": t.kind = Lbrack
        case "]": t.kind = Rbrack; l.insertSemi = true
        case "{": t.kind = Lbrace
        case "}": t.kind = Rbrace; l.insertSemi = true
        case "#": t.kind = Directive
        case ".":
            t.kind = Period
            if l.currentCP == cast(u32)"." {
                t.kind = Ellipsis
                t.lit.len = 2
                NextCodePoint(l)
            }
        case: t.kind = Invalid
        }
    }

    return t
}

GetKeyword :: fn(s: []u8) -> TokenKind {
    using TokenKind
    using strings

    switch s[0] {
    case "a":
        if Compare(s, "autocast")
            return Autocast
    case "b":
        if Compare(s, "bitcast")
            return Bitcast
        if Compare(s, "break")
            return Break
    case "c":
        if Compare(s, "case")
            return Case
        if Compare(s, "cast")
            return Cast
        if Compare(s, "continue")
            return Continue
    case "d":
        if Compare(s, "defer")
            return Defer
    case "e":
        if Compare(s, "else")
            return Else
        if Compare(s, "enum")
            return Enum
    case "f":
        if Compare(s, "fallthrough")
            return Fallthrough
        if Compare(s, "fn")
            return Fn
        if Compare(s, "for")
            return For
    case "g":
        if Compare(s, "goto")
            return Goto
    case "i":
        if Compare(s, "if")
            return If
        if Compare(s, "in")
            return In
    case "n":
        if Compare(s, "nil")
            return Nil
    case "r":
        if Compare(s, "return")
            return Return
    case "s":
        if Compare(s, "struct")
            return Struct
        if Compare(s, "switch")
            return Switch
    case "u":
        if Compare(s, "union")
            return Union
        if Compare(s, "using")
            return Using
    case "v":
        if Compare(s, "variant")
            return Variant
    }
    
    return Ident
}

switch2 :: fn(l: *Lexer, t1, t2: TokenKind) -> TokenKind {
    if l.currentCP == cast(u32)"=" {
        NextCodePoint(l)
        return t2
    }
    return t1
}

switch3 :: fn(l: *Lexer, t1, t2, t3: TokenKind, ch: strings.CodePoint) -> TokenKind {
    if l.currentCP == cast(u32)"=" {
        NextCodePoint(l)
        return t2
    }

    if l.currentCP == ch {
        NextCodePoint(l)
        return t3
    }

    return t1
}

switch4 :: fn(l: *Lexer, t1, t2 ,t3, t4: TokenKind, ch: strings.CodePoint) -> TokenKind {
    if l.currentCP == cast(u32)"=" {
        NextCodePoint(l)
        return t2
    }

    if l.currentCP == ch {
        NextCodePoint(l)
        if l.currentCP == cast(u32)"=" {
            NextCodePoint(l)
            return t4
        }
        return t3
    }

    return t1
}

// TODO(Brett)
findLineEnd :: fn(l: *Lexer) -> bool {
    return true
}

error :: fn(l: *Lexer, message: string) -> void {
    pos := Position {
        filename: l.path,
        line: cast(u32)l.lineCount,
        column: cast(u32)l.offset - l.lineOffset + 1
    }
    token: Token
    token.pos = pos
    errors.Error(token, message)
}

Describe :: fn(tok: Token) -> string {
    using TokenKind
    switch tok.kind {
    case Invalid:   return "<illegal>"
    case Eof:       return "<EOF>"
    case Comment:   return "<comment>"
    case Ident:     return "<ident>"
    case Directive: return "<directive>"
    case Int:       return "<int>"
    case Float:     return "<float>"
    case String:    return "<string>"
    case Add:       return "+"
    case Sub:       return "-"
    case Mul:       return "*"
    case Quo:       return "/"
    case Rem:       return "%"
    case And:       return "&"
    case Or:        return "|"
    case Xor:       return "^"
    case Shl:       return "<<"
    case Shr:       return ">>"
    case AssignAdd: return "+="
    case AssignSub: return "-="
    case AssignMul: return "*="
    case AssignQuo: return "/="
    case AssignRem: return "%="
    case AssignAnd: return "&="
    case AssignOr:  return "|="
    case AssignXor: return "^="
    case AssignShl: return "<<="
    case AssignShr: return ">>="
    case Land:      return "&&"
    case Lor:       return "||"
    case Lss:       return "<"
    case Gtr:       return ">"
    case Not:       return "!"
    case Eql:       return "=="
    case Neq:       return "!="
    case Leq:       return "<="
    case Geq:       return ">="
    case Assign:    return "="
    case Ellipsis:  return ".."
    case Dollar:    return "$"
    case Question:  return "?"
    case RetArrow:  return "->"
    case Lparen:    return "("
    case Lbrack:    return "["
    case Lbrace:    return "{"
    case Rparen:    return ")"
    case Rbrack:    return "]"
    case Rbrace:    return "}"
    case Comma:     return ","
    case Period:    return "."
    case Colon:     return ":"
    case Semicolon: return ";"
    case Cast:      return "cast"
    case Bitcast:   return "bitcast"
    case Autocast:  return "autocast"
    case Using:     return "using"
    case Goto:      return "goto"
    case Break:     return "break"
    case Continue:  return "continue"
    case Fallthrough: return "fallthrough"
    case Return:    return "return"
    case If:        return "if"
    case For:       return "for"
    case Else:      return "else"
    case Defer:     return "defer"
    case In:        return "in"
    case Switch:    return "switch"
    case Case:      return "case"
    case Fn:        return "fn"
    case Union:     return "union"
    case Variant:   return "variant"
    case Enum:      return "enum"
    case Struct:    return "struct"
    case Nil:       return "nil"
    case: return "<unknown>"
    }
}
